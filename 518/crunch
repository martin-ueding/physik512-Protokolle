#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013-2014 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

import json
import sys

import matplotlib.pyplot as pl
import numpy as np
import scipy.misc
import scipy.ndimage.filters
import scipy.optimize as op
import scipy.stats
import unitprint

def landau(x, amp, width, offset):
    z = (x-offset) / width
    return amp/np.sqrt(2*np.pi) * np.exp(-0.5*(z+np.exp(-z)))

def job_cos_squared():
    '''
    Generiert eine :math:`\cos(\phi)^2` Datei zum Plotten.
    '''
    phi = np.linspace(0, 2*np.pi, 1000)
    y = np.cos(phi)**2

    np.savetxt('_build/cos2.csv', np.column_stack([np.degrees(phi), y]))

def gauss(x, mean, sigma, a):
    '''
    Einfache Normalverteilung, deren Integral durch ``a`` gegeben ist.
    '''
    return a / (np.sqrt(2 * np.pi) * sigma) \
            * np.exp(- (x - mean)**2/(2 * sigma**2))

def linear(x, a, b):
    '''
    Lineare Funktion.
    '''
    return a * x + b

def decay(x, tau, a):
    '''
    Exponentieller Abfall.
    '''
    return a * np.exp(- x / tau)

def cubic(x, a, b, c, d):
    '''
    Kubische Funktion.
    '''
    return a * x**3 + b * x**2 + c * x + d

def double_gauss(x, mean1, mean2, sigma1, sigma2, a, b):
    '''
    Summe von zwei Gaußfunktionen.
    '''
    return gauss(x, mean1, sigma1, a) + gauss(x, mean2, sigma2, b)

def fit_peak(T, filename, kind, lower, upper, p0, energy, show=False):
    '''
    Passt einen einzelnen Peak an.

    Als Seiteneffekt werden die Fitdaten in das Template dict geschrieben und
    die Fits in Plotdateien ausgegeben.

    :param T: Template dict
    :param filename: Dateiname mit Datenpunkten
    :param kind: ``double`` oder anderes
    :param lower: Unterer Index
    :param upper: Oberer Index
    :param p0: Anfangswerte für Fit
    :param energy: Energie, der dieser Peak entspricht
    :param show: Zeige Plot interaktiv an

    :return: Mittelpunkt, Fehler Mittelpunkt, Breite, Fehler Breite, Energie
    '''
    data = np.loadtxt(filename)
    bins = data[:, 0]
    counts = data[:, 1]

    fit_bins = bins[lower:upper]
    fit_counts = counts[lower:upper]

    x = np.linspace(np.min(fit_bins), np.max(fit_bins), 1000)

    if kind == 'double':
        popt, pconv = op.curve_fit(double_gauss, fit_bins, fit_counts, p0=p0)
        d = np.sqrt(pconv.diagonal())
        y = double_gauss(x, *popt)
        T['{}_mean_kanal'.format(energy)] = unitprint.siunitx(popt[1], d[1])
        T['{}_sigma'.format(energy)] = unitprint.siunitx(popt[3], d[3])
        np.savetxt('_build/fit_peak_{}.txt'.format(energy), np.column_stack([x, y]))

        return popt[1], d[1], abs(popt[3]), d[3], energy

    else:
        popt, pconv = op.curve_fit(gauss, fit_bins, fit_counts, p0=p0)
        d = np.sqrt(pconv.diagonal())
        y = gauss(x, *popt)
        T['{}_mean_kanal'.format(energy)] = unitprint.siunitx(popt[0], d[0])
        T['{}_sigma'.format(energy)] = unitprint.siunitx(popt[1], d[1])
        np.savetxt('_build/fit_peak_{}.txt'.format(energy), np.column_stack([x, y]))

        return popt[0], d[0], abs(popt[1]), d[1], energy

def fit_gauge_points(T, points, show=False):
    '''
    Passt an Eichpunkte eine Gerade an und gibt die Fitparameter zurück.

    Als Nebeneffekt werden die Daten zum Plotten in Dateien geschrieben.
    '''
    p = np.array(points)
    channel_val = p[:, 0]
    channel_err = p[:, 1]
    width_val = p[:, 2]
    width_err = p[:, 3]
    energy = p[:, 4]

    popt, pconv = op.curve_fit(linear, channel_val, energy)

    d = np.sqrt(pconv.diagonal())

    points_table = np.column_stack([channel_val, energy, channel_err])
    np.savetxt('_build/data_energieeichung.txt', points_table)
    T['data_energieeichung'] = list(zip(
        unitprint.siunitx(channel_val, channel_err),
        unitprint.siunitx(width_val, width_err),
        unitprint.siunitx(energy),
    ))

    x = np.linspace(np.min(channel_val), np.max(channel_val), 10)
    y = linear(x, *popt)

    T['fit_energieeichung_steigung'] = unitprint.siunitx(popt[0], d[0])
    T['fit_energieeichung_offset'] = unitprint.siunitx(popt[1], d[1])

    if show:
        pl.plot(channel_val, energy, marker='+', linestyle='none')
        pl.plot(x, y)
        pl.show()

    np.savetxt('_build/fit_energieeichung.txt', np.column_stack([x, y]))

    return popt, pconv

def lebensdauer_schwellenbestimmung(T):
    data = np.loadtxt('Daten/lebensdauer_schwellen.txt')

    # Schwellen
    schwelle_me_c1 = data[:,0]
    schwelle_me_c2 = data[:,1]
    schwelle_mo_c1 = data[:,2]
    schwelle_mo_c2 = data[:,3]

    # Ereignisse
    count_me_c1 = data[:,4]
    count_me_c2 = data[:,5]
    count_mo_c1 = data[:,6]
    count_mo_c2 = data[:,7]

    # Zeit
    time = data[:,8]

    T['schwelle_mo_c1'] = schwelle_mo_c1[0]
    T['schwelle_mo_c2'] = schwelle_mo_c2[0]

    T['schwellen_roh'] = list(zip(
        unitprint.siunitx(data[:, 0]),
        unitprint.siunitx(data[:, 1]),
        unitprint.siunitx(data[:, 4]),
        unitprint.siunitx(data[:, 5], allowed_hang=5),
        unitprint.siunitx(data[:, 6]),
        unitprint.siunitx(data[:, 7]),
        unitprint.siunitx(data[:, 8]),
    ))

    # Raten
    rate_me_c1_val = data[:,4]/time
    rate_me_c2_val = data[:,5]/time
    rate_mo_c1_val = data[:,6]/time
    rate_mo_c2_val = data[:,7]/time

    rate_me_c1_err = np.sqrt(data[:,4]) / time
    rate_me_c2_err = np.sqrt(data[:,5]) / time
    rate_mo_c1_err = np.sqrt(data[:,6]) / time
    rate_mo_c2_err = np.sqrt(data[:,7]) / time

    r_data, diff_data = ratio_derivative_plot(schwelle_me_c1, rate_me_c1_val,
                                              rate_me_c1_err, rate_mo_c1_val,
                                              rate_mo_c1_err)
    ratio_output(T, 'c1', schwelle_me_c1, r_data, diff_data)
    r_data, diff_data = ratio_derivative_plot(schwelle_me_c2, rate_me_c2_val,
                                              rate_me_c2_err, rate_mo_c2_val,
                                              rate_mo_c2_err)
    ratio_output(T, 'c2', schwelle_me_c1, r_data, diff_data)

def ratio_derivative_plot(schwelle_me, rate_me_val, rate_me_err, rate_mo_val, rate_mo_err):
    # Verhältnisse
    ratio_val = rate_me_val/rate_mo_val
    ratio_err = np.sqrt(
        (rate_me_err/rate_mo_val)**2
        + (rate_mo_val / rate_mo_val**2 * rate_mo_err)**2
    )

    pl.errorbar(schwelle_me, ratio_val, yerr=ratio_err)
    diff_x = np.diff(schwelle_me)
    diff_x = schwelle_me[:-1] + diff_x/2
    diff_y = np.diff(ratio_val)
    diff_y_err = np.sqrt(
        (ratio_err[1:])**2
        + (ratio_err[:-1])**2
    )
    pl.errorbar(diff_x, diff_y, yerr=diff_y_err)
    pl.grid(True)
    #pl.show()
    pl.clf()

    return np.column_stack([ratio_val, ratio_err]), \
            np.column_stack([diff_x, diff_y, diff_y_err])

def ratio_output(T, tag, schwelle_me, r_data, diff_data):
    np.savetxt('_build/ratio-data-{}.csv'.format(tag), np.column_stack([schwelle_me, r_data]))
    np.savetxt('_build/ratio-diff-{}.csv'.format(tag), diff_data)

    T['table_ratio_{}'.format(tag)] = list(zip(
        unitprint.siunitx(schwelle_me),
        unitprint.siunitx(r_data[:, 0], r_data[:, 1]),
    ))

    T['table_diff_{}'.format(tag)] = list(zip(
        unitprint.siunitx(diff_data[:, 0]),
        unitprint.siunitx(diff_data[:, 1], diff_data[:, 2]),
    ))

def winkel_schwellenbestimmung(T):
    data = np.loadtxt('Daten/sweep_6.txt')
    index = data[:, 0]
    schwelle = data[:, 1]
    koinzidenz_val = data[:, 2]
    koinzidenz_err = np.sqrt(data[:, 2])
    d12 = data[:, 3]
    oder = data[:, 4]
    d25 = data[:, 5]

    diff_x = np.diff(schwelle)
    diff_x = schwelle[:-1] + diff_x/2
    diff_y = np.diff(koinzidenz_val)
    diff_y_err = np.sqrt(
        (koinzidenz_err[1:])**2
        + (koinzidenz_err[:-1])**2
    )

    diff_x2 = np.diff(diff_x)
    diff_x2 = diff_x[:-1] + diff_x2/2
    diff_y2 = np.diff(diff_y)
    diff_y2_err = np.sqrt(
        (diff_y_err[1:])**2
        + (diff_y_err[:-1])**2
    )

    np.savetxt('_build/winkel-schwelle-ratio.csv', np.column_stack([
        schwelle, koinzidenz_val, koinzidenz_err,
    ]))

    np.savetxt('_build/winkel-schwelle-steigung.csv', np.column_stack([
        diff_x, diff_y, diff_y_err,
    ]))

    np.savetxt('_build/winkel-schwelle-kruemmung.csv', np.column_stack([
        diff_x2, diff_y2, diff_y2_err,
    ]))

    T['winkel_sweep_roh'] = list(zip(
        unitprint.siunitx(data[:, 0]),
        unitprint.siunitx(data[:, 1]),
        unitprint.siunitx(data[:, 2], allowed_hang=6),
        unitprint.siunitx(data[:, 3], allowed_hang=6),
        unitprint.siunitx(data[:, 4], allowed_hang=6),
        unitprint.siunitx(data[:, 5], allowed_hang=6),
    ))

def decay(x, tau, amp):
    return amp * np.exp(- x / tau)

def job_lebensdauer(T):
    data = np.loadtxt('Daten/Lebensdauer.csv')
    slot = data[:, 0]
    anzahl_val = data[:, 1]
    anzahl_err = np.sqrt(anzahl_val)

    np.savetxt('_build/leben-daten.csv', np.column_stack([
        slot, anzahl_val, anzahl_err,
    ]))

    popt, pconv = op.curve_fit(decay, slot, anzahl_val, sigma=anzahl_err)
    d = np.sqrt(pconv.diagonal())
    print(popt)

    fit_x = np.linspace(np.min(slot), np.max(slot), 100)
    fit_y = decay(fit_x, *popt)
    np.savetxt('_build/leben-fit.csv', np.column_stack([
        fit_x, fit_y,
    ]))

    T['leben_fit_time'] = unitprint.siunitx(popt[0], d[0])
    T['leben_daten'] = list(zip(
        unitprint.siunitx(slot),
        unitprint.siunitx(anzahl_val, anzahl_err),
    ))

def cos_fit(x, amp, off, phi, ex):
    return amp * np.cos(np.radians(x + phi))**ex + off

def job_winkelverteilung(T):
    data = np.loadtxt('Daten/Winkel.csv')

    anzahl_val = data[:, 1]
    selection = anzahl_val > 1

    winkel = data[:, 0]
    winkel[winkel > 90] -= 180
    anzahl_val = anzahl_val
    anzahl_err = np.sqrt(anzahl_val)

    np.savetxt('_build/winkel-daten.csv', np.column_stack([
        winkel, anzahl_val, anzahl_err,
    ]))
    T['winkel_daten'] = list(zip(
        unitprint.siunitx(winkel),
        unitprint.siunitx(anzahl_val, anzahl_err),
    ))

    winkel = data[:, 0][selection]
    winkel[winkel > 90] -= 180
    anzahl_val = anzahl_val[selection]
    anzahl_err = np.sqrt(anzahl_val)

    popt, pconv = op.curve_fit(cos_fit, winkel, anzahl_val, sigma=anzahl_err, p0=[1000, -10, 0, 2])
    print(popt)
    d = np.sqrt(pconv.diagonal())
    chi_sq, p = scipy.stats.chisquare(anzahl_val, f_exp=cos_fit(winkel, *popt), ddof=3)

    fit_x = np.linspace(np.min(winkel), np.max(winkel), 100)
    fit_y = cos_fit(fit_x, *popt)
    np.savetxt('_build/winkel-fit.csv', np.column_stack([
        fit_x, fit_y,
    ]))

    T['cos_fit_amp'] = unitprint.siunitx(popt[0], d[0])
    T['cos_fit_off'] = unitprint.siunitx(popt[1], d[1])
    T['cos_fit_phi'] = unitprint.siunitx(popt[2], d[2])
    T['cos_fit_exp'] = unitprint.siunitx(popt[3], d[3])
    T['cos_chi_sq'] = unitprint.siunitx(chi_sq)
    T['cos_p'] = unitprint.siunitx(p)

def job_landau_fit(T):
    data = np.loadtxt('Daten/Werte.txt')
    kanal = data[50:900, 0]
    werte_val = data[50:900, 1]

    selection = werte_val > 0

    kanal = kanal[selection]
    werte_val = werte_val[selection]
    werte_err = np.sqrt(werte_val)

    popt, pconv = op.curve_fit(landau, kanal, werte_val, p0=(30, 300, 100))
    d = np.sqrt(pconv.diagonal())

    chi_sq, p = scipy.stats.chisquare(werte_val, f_exp=landau(kanal, *popt), ddof=2)
    print('chi_sq', chi_sq)
    print('p', p)

    T['landau_fit_amp'] = unitprint.siunitx(popt[0], d[0])
    T['landau_fit_width'] = unitprint.siunitx(popt[1], d[1])
    T['landau_fit_offset'] = unitprint.siunitx(popt[2], d[2])
    T['landau_chi_sq'] = unitprint.siunitx(chi_sq)
    T['landau_p'] = unitprint.siunitx(p)

    fit_x = np.linspace(np.min(kanal), np.max(kanal), 200)
    fit_y = landau(fit_x, *popt)

    np.savetxt('_build/landau-fit.txt', np.column_stack((fit_x, fit_y)))

    popt, pconv = op.curve_fit(gauss, kanal, werte_val, p0=(300, 100, 100))
    d = np.sqrt(pconv.diagonal())

    chi_sq, p = scipy.stats.chisquare(werte_val, f_exp=gauss(kanal, *popt), ddof=2)
    print('chi_sq', chi_sq)
    print('p', p)

    fit_x = np.linspace(np.min(kanal), np.max(kanal), 200)
    fit_y = gauss(fit_x, *popt)

    T['gauss_fit_mean'] = unitprint.siunitx(popt[0], d[0])
    T['gauss_fit_sigma'] = unitprint.siunitx(popt[1], d[1])
    T['gauss_fit_integral'] = unitprint.siunitx(popt[2], d[2])
    T['gauss_chi_sq'] = unitprint.siunitx(chi_sq)
    T['gauss_p'] = unitprint.siunitx(p)

    np.savetxt('_build/gauss-fit.txt', np.column_stack((fit_x, fit_y)))

def test_keys(T):
    '''
    Testet das dict auf Schlüssel mit Bindestrichen.
    '''
    dash_keys = []
    for key in T:
        if '-' in key:
            dash_keys.append(key)

    if len(dash_keys) > 0:
        print()
        print('**************************************************************')
        print('* Es dürfen keine Bindestriche in den Schlüsseln für T sein! *')
        print('**************************************************************')
        print()
        print('Folgende Schlüssel enthalten Bindestriche:')
        for dash_key in dash_keys:
            print('-', dash_key)
        print()
        sys.exit(100)

def main():
    T = {}

    job_landau_fit(T)
    job_winkelverteilung(T)
    job_lebensdauer(T)
    job_cos_squared()
    lebensdauer_schwellenbestimmung(T)
    winkel_schwellenbestimmung(T)

    test_keys(T)
    with open('_build/template.js', 'w') as f:
        json.dump(dict(T), f, indent=4, sort_keys=True)

if __name__ == "__main__":
    main()
