#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright Â© 2013-2014 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

import json

import matplotlib.pyplot as pl
import numpy as np
import scipy.optimize as op
import scipy.misc
import unitprint


savefig_options = {
    'bbox_inches': 'tight',
}

c = 3e8 # m/s
R_infinity = 10973731 # 1/m
h = 6.626e-34 # J s
e = 1.609e-19

def gauss(x, mean, stddev, amplitude):
    return amplitude * np.exp(- ((x - mean) / stddev)**2)

def linear(x, a, b):
    return x * a + b

def decay(x, tau, amplitude):
    return amplitude * np.exp(-x/tau)

def fit_peak(T, filename, lower, upper, p0, prefix, energy, show=False):
    data = np.loadtxt(filename)
    bins = data[:, 0]
    counts = data[:, 1]

    fit_bins = bins[lower:upper]
    fit_counts = counts[lower:upper]

    popt, pconv = op.curve_fit(gauss, fit_bins, fit_counts, p0=p0)
    print(popt)
    print(pconv)
    d = np.sqrt(pconv.diagonal())
    x = np.linspace(np.min(fit_bins), np.max(fit_bins), 1000)
    y = gauss(x, *popt)

    T['{}_{}_mean_kanal'.format(prefix, energy)] = unitprint.siunitx(popt[0], d[0])
    T['{}_{}_std_kanal'.format(prefix, energy)] = unitprint.siunitx(popt[1], d[1])

    np.savetxt('_build/fit_{}_{}.txt'.format(prefix, energy), np.column_stack([x, y]))

    if show:
        pl.plot(bins, counts)
        pl.plot(fit_bins, fit_counts)
        pl.plot(x, y)
        pl.show()

    return (popt[0], d[0], abs(popt[1]), d[1], energy)

def fit_gauge_points(T, points, prefix, show=False):
    p = np.array(points)
    channel_val = p[:, 0]
    channel_err = p[:, 1]
    width_val = p[:, 2]
    width_err = p[:, 3]
    energy = p[:, 4]

    popt, pconv = op.curve_fit(linear, channel_val, energy)
    print(popt)
    print(pconv)

    d = np.sqrt(pconv.diagonal())

    points_table = np.column_stack([channel_val, energy, channel_err])
    np.savetxt('_build/fit_detektor_'+prefix+'_data.txt', points_table)
    T['fit_detektor_'+prefix+'_data'] = list(zip(
        unitprint.siunitx(channel_val, channel_err),
        unitprint.siunitx(width_val, width_err),
        unitprint.siunitx(energy),
    ))

    x = np.linspace(np.min(channel_val), np.max(channel_val), 10)
    y = linear(x, *popt)

    T['fit_detektor_'+prefix+'_steigung'] = unitprint.siunitx(popt[0], d[0])
    T['fit_detektor_'+prefix+'_offset'] = unitprint.siunitx(popt[1], d[1])

    if show:
        pl.plot(channel_val, energy, marker='+', linestyle='none')
        pl.plot(x, y)
        pl.show()

    np.savetxt('_build/fit_detektor_'+prefix+'_fit.txt', np.column_stack([x, y]))

    return lambda x: x * popt[0] + popt[1]

def extract_boundaries(filename, converter):
    data = np.loadtxt(filename)
    channel = data[:, 0]
    counts = data[:, 1]
    energies = converter(channel)

    max_counts = np.max(counts)

    selection = counts > max_counts / 10

    return np.min(energies[selection]), np.max(energies[selection])

def job_energieeichung_links(T):
    gauge_points = []

    gauge_points.append(fit_peak(T, 'Daten/005-Na-Zoom.txt', 5800, 7000, [6400, 500, 35], 'Na_links', 511))

    gauge_points.append(fit_peak(T, 'Daten/011-Ba-Spek-l.txt', 380, 535, [450, 40, 63000], 'Ba_links', 31))
    gauge_points.append(fit_peak(T, 'Daten/011-Ba-Spek-l.txt', 1080, 1295, [1200, 40, 1200], 'Ba_links', 81))
    gauge_points.append(fit_peak(T, 'Daten/011-Ba-Spek-l.txt', 4543, 5164, [4834, 40, 9300], 'Ba_links', 356))

    f = fit_gauge_points(T, gauge_points, 'links')

    T['fwhm_links'] = []
    aufloesung(T['fwhm_links'], 511, gauge_points[0][2], f)
    aufloesung(T['fwhm_links'], 31, gauge_points[1][2], f)
    aufloesung(T['fwhm_links'], 81, gauge_points[2][2], f)
    aufloesung(T['fwhm_links'], 356, gauge_points[3][2], f)


    a, b = extract_boundaries('Daten/006-Na-511keV.txt', f)
    T['na_sca_rechts_min'] = unitprint.siunitx(a)
    T['na_sca_rechts_max'] = unitprint.siunitx(b)

    a, b = extract_boundaries('Daten/012-Ba-SCA-l.txt', f)
    T['ba_sca_links_min'] = unitprint.siunitx(a)
    T['ba_sca_links_max'] = unitprint.siunitx(b)

def aufloesung(Tlist, value, width, converter):
    sigma_val = converter(width) - converter(0)
    fwhm_val = sigma_val * 2 * np.sqrt(2 * np.log(2))

    sigma_err = scipy.misc.derivative(converter, width)
    fwhm_err = sigma_err * 2 * np.sqrt(2 * np.log(2))

    Tlist.append([
        value,
        unitprint.siunitx(fwhm_val, fwhm_err),
        unitprint.siunitx(value/fwhm_val, value/fwhm_val**2 * fwhm_err),
    ])


def job_energieeichung_rechts(T):
    gauge_points = []

    gauge_points.append(fit_peak(T, 'Daten/003-Na-Spektrum.txt', 6000, 7000, [6400, 500, 100], 'Na_rechts', 511))
    gauge_points.append(fit_peak(T, 'Daten/009-Ba-Spek-r.txt', 270, 500, [384, 40, 17000], 'Ba_rechts', 31))
    gauge_points.append(fit_peak(T, 'Daten/009-Ba-Spek-r.txt', 1000, 1200, [1100, 40, 1000], 'Ba_rechts', 81))
    gauge_points.append(fit_peak(T, 'Daten/009-Ba-Spek-r.txt', 4300, 4800, [4500, 40, 3000], 'Ba_rechts', 356))

    f = fit_gauge_points(T, gauge_points, 'rechts')

    T['fwhm_rechts'] = []
    aufloesung(T['fwhm_rechts'], 511, gauge_points[0][2], f)
    aufloesung(T['fwhm_rechts'], 31, gauge_points[1][2], f)
    aufloesung(T['fwhm_rechts'], 81, gauge_points[2][2], f)
    aufloesung(T['fwhm_rechts'], 356, gauge_points[3][2], f)

    a, b = extract_boundaries('Daten/007-Na-SCA-neu.txt', f)
    T['na_sca_links_min'] = unitprint.siunitx(a)
    T['na_sca_links_max'] = unitprint.siunitx(b)


    a, b = extract_boundaries('Daten/010-Ba-SCA-r.txt', f)
    T['ba_sca_rechts_min'] = unitprint.siunitx(a)
    T['ba_sca_rechts_max'] = unitprint.siunitx(b)

def job_zeiteichung(T):
    gauge_points = []

    gauge_points.append(fit_peak(T, 'Daten/Zeiteichung.txt', 1390, 1640, [1500, 500, 150], 'prompt', 16))
    gauge_points.append(fit_peak(T, 'Daten/Zeiteichung.txt', 2657, 2900, [2770, 500, 150], 'prompt', 32))
    gauge_points.append(fit_peak(T, 'Daten/Zeiteichung.txt', 3894, 4160, [4039, 500, 150], 'prompt', 48))
    gauge_points.append(fit_peak(T, 'Daten/Zeiteichung.txt', 5142, 5433, [5312, 500, 150], 'prompt', 64))
    gauge_points.append(fit_peak(T, 'Daten/Zeiteichung.txt', 6415, 6670, [6570, 500, 150], 'prompt', 80))

    f = fit_gauge_points(T, gauge_points, 'prompt')

    widths_val = np.array([x[2] for x in gauge_points]) * 2 * np.sqrt(2 * np.log(2))
    widths_err = np.array([x[3] for x in gauge_points]) * 2 * np.sqrt(2 * np.log(2))

    widths_val_ns = f(widths_val) - f(0)

    print(widths_val)
    print(widths_val_ns)

    T['widths_ns'] = unitprint.siunitx(np.mean(widths_val_ns), np.std(widths_val_ns))




    l = np.loadtxt('Daten/Langzeit.txt')
    channel = l[:, 0]
    count = l[:, 1]
    time = f(channel)


    np.savetxt('_build/langzeit_daten.txt', np.column_stack([time, count]))

    selection = time > 22

    time_part = time[selection]
    count_part = count[selection]

    popt, pconv = op.curve_fit(decay, time_part, count_part, p0=[10, 60000])
    d = np.sqrt(pconv.diagonal())

    x = np.linspace(np.min(time_part), np.max(time_part), 1000)
    y = decay(x, *popt)

    np.savetxt('_build/langzeit_fit.txt', np.column_stack([x, y]))

    T['tau'] = unitprint.siunitx(popt[0], d[0])

    half_time_lit = 6.283

    tau_lit = half_time_lit / np.log(2)

    T['tau_lit'] = unitprint.siunitx(tau_lit)


def job_moseley(T):
    Z = 56
    nu = 3/4 * R_infinity * c * (Z - 1)**2

    E = h * nu
    E_keV = E / e / 10**3

    T['E_K_alpha_Ba_keV'] = unitprint.siunitx(E_keV)

def main():
    T = {}

    job_moseley(T)
    job_energieeichung_rechts(T)
    job_energieeichung_links(T)
    job_zeiteichung(T)

    with open('_build/template.js', 'w') as f:
        json.dump(dict(T), f, indent=4, sort_keys=True)

if __name__ == "__main__":
    main()
